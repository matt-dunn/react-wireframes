// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Wireframe: withWireFrameAnnotation should highlight annotation 1`] = `
.emotion-2 {
  position: relative;
}

.emotion-2 [disabled] {
  pointer-events: none;
}

.emotion-2:hover {
  z-index: 5000;
}

.emotion-2:hover > * {
  box-shadow: 0 0 0 1px #4086f7 !important;
}

.emotion-2:hover > [data-annotation-identifier] {
  -webkit-transition: opacity 0ms,visibility 0ms;
  transition: opacity 0ms,visibility 0ms;
  opacity: 1;
}

.emotion-0 {
  border-radius: 50px;
  background-color: yellow;
  border-color: #caca00;
  white-space: nowrap;
  min-width: 2em;
  height: 2em;
  padding: 0.25em;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  font-style: normal;
  font-weight: normal;
  position: absolute;
  top: -1em;
  left: -1em;
  z-index: 4000;
  cursor: default;
  -webkit-transition: opacity 250ms,visibility 250ms;
  transition: opacity 250ms,visibility 250ms;
  opacity: 0.75;
  visibility: visible;
}

.emotion-0.fade-id.enter {
  opacity: 0;
  visibility: hidden;
}

.emotion-0.fade-id.enter-active {
  opacity: 0.75;
  visibility: visible;
}

.emotion-0.fade-id.exit {
  opacity: 0.75;
  visibility: visible;
}

.emotion-0.fade-id.exit-active {
  opacity: 0;
  visibility: hidden;
}

<WireFrameProvider
  api={
    Object {
      "getComponents": [Function],
      "highlightNote": [Function],
      "isOpen": [Function],
      "onOpen": [Function],
      "register": [Function],
      "setOpen": [Function],
      "setOptions": [Function],
      "unregister": [Function],
    }
  }
>
  <WireFrameAnnotation>
    <Wrapper
      onFocus={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      show={true}
    >
      <span
        className="emotion-2 emotion-3"
        onFocus={[Function]}
        onMouseLeave={[Function]}
        onMouseOver={[Function]}
      >
        <Identifier
          annotation={
            Object {
              "Component": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "displayName": "withWireFrameAnnotation(Component)",
                "type": [Function],
              },
              "count": 1,
              "id": 1,
              "options": Object {
                "description": <div>
                  Description.
                </div>,
                "title": <div>
                  Title
                </div>,
              },
            }
          }
          show={true}
        >
          <CSSTransition
            className="fade-id"
            classNames=""
            in={true}
            mountOnEnter={true}
            timeout={250}
            unmountOnExit={true}
          >
            <Transition
              appear={false}
              className="fade-id"
              enter={true}
              exit={true}
              in={true}
              mountOnEnter={true}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={250}
              unmountOnExit={true}
            >
              <IdentifierContainer
                className="fade-id"
                data-annotation-identifier={true}
              >
                <cite
                  className="fade-id emotion-0 emotion-1"
                  data-annotation-identifier={true}
                >
                  1
                </cite>
              </IdentifierContainer>
            </Transition>
          </CSSTransition>
        </Identifier>
        <withWireFrameAnnotation(Component)>
          <Component>
            <div>
              MOCK COMPONENT
            </div>
          </Component>
        </withWireFrameAnnotation(Component)>
      </span>
    </Wrapper>
  </WireFrameAnnotation>
</WireFrameProvider>
`;

exports[`Wireframe: withWireFrameAnnotation should render annotation identifier when open 1`] = `
.emotion-0 {
  position: relative;
}

.emotion-0 [disabled] {
  pointer-events: none;
}

.emotion-0:hover > [data-annotation-identifier] {
  -webkit-transition: opacity 0ms,visibility 0ms;
  transition: opacity 0ms,visibility 0ms;
  opacity: 1;
}

<WireFrameProvider
  api={
    Object {
      "getComponents": [Function],
      "highlightNote": [Function],
      "isOpen": [Function],
      "onOpen": [Function],
      "register": [Function],
      "setOpen": [Function],
      "setOptions": [Function],
      "unregister": [Function],
    }
  }
>
  <WireFrameAnnotation>
    <Wrapper
      onFocus={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      show={false}
    >
      <span
        className="emotion-0 emotion-1"
        onFocus={[Function]}
        onMouseLeave={[Function]}
        onMouseOver={[Function]}
      >
        <Identifier
          annotation={
            Object {
              "Component": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "displayName": "withWireFrameAnnotation(Component)",
                "type": [Function],
              },
              "count": 1,
              "id": 1,
              "options": Object {
                "description": <div>
                  Description.
                </div>,
                "title": <div>
                  Title
                </div>,
              },
            }
          }
          show={false}
        >
          <CSSTransition
            className="fade-id"
            classNames=""
            in={false}
            mountOnEnter={true}
            timeout={250}
            unmountOnExit={true}
          >
            <Transition
              appear={false}
              className="fade-id"
              enter={true}
              exit={true}
              in={false}
              mountOnEnter={true}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={250}
              unmountOnExit={true}
            />
          </CSSTransition>
        </Identifier>
        <withWireFrameAnnotation(Component)>
          <Component>
            <div>
              MOCK COMPONENT
            </div>
          </Component>
        </withWireFrameAnnotation(Component)>
      </span>
    </Wrapper>
  </WireFrameAnnotation>
</WireFrameProvider>
`;

exports[`Wireframe: withWireFrameAnnotation should render without identifier when closed 1`] = `
.emotion-0 {
  position: relative;
}

.emotion-0 [disabled] {
  pointer-events: none;
}

.emotion-0:hover > [data-annotation-identifier] {
  -webkit-transition: opacity 0ms,visibility 0ms;
  transition: opacity 0ms,visibility 0ms;
  opacity: 1;
}

<WireFrameProvider
  api={
    Object {
      "getComponents": [Function],
      "highlightNote": [Function],
      "isOpen": [Function],
      "onOpen": [Function],
      "register": [Function],
      "setOpen": [Function],
      "setOptions": [Function],
      "unregister": [Function],
    }
  }
>
  <WireFrameAnnotation>
    <Wrapper
      onFocus={[Function]}
      onMouseLeave={[Function]}
      onMouseOver={[Function]}
      show={false}
    >
      <span
        className="emotion-0 emotion-1"
        onFocus={[Function]}
        onMouseLeave={[Function]}
        onMouseOver={[Function]}
      >
        <Identifier
          annotation={
            Object {
              "Component": Object {
                "$$typeof": Symbol(react.memo),
                "compare": null,
                "displayName": "withWireFrameAnnotation(Component)",
                "type": [Function],
              },
              "count": 1,
              "id": 1,
              "options": Object {
                "description": <div>
                  Description.
                </div>,
                "title": <div>
                  Title
                </div>,
              },
            }
          }
          show={false}
        >
          <CSSTransition
            className="fade-id"
            classNames=""
            in={false}
            mountOnEnter={true}
            timeout={250}
            unmountOnExit={true}
          >
            <Transition
              appear={false}
              className="fade-id"
              enter={true}
              exit={true}
              in={false}
              mountOnEnter={true}
              onEnter={[Function]}
              onEntered={[Function]}
              onEntering={[Function]}
              onExit={[Function]}
              onExited={[Function]}
              onExiting={[Function]}
              timeout={250}
              unmountOnExit={true}
            />
          </CSSTransition>
        </Identifier>
        <withWireFrameAnnotation(Component)>
          <Component>
            <div>
              MOCK COMPONENT
            </div>
          </Component>
        </withWireFrameAnnotation(Component)>
      </span>
    </Wrapper>
  </WireFrameAnnotation>
</WireFrameProvider>
`;
